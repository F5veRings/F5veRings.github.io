<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="F5veRings.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="F5veRings.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-08-31T11:02:56+00:00</updated><id>F5veRings.github.io/feed.xml</id><title type="html">blank</title><subtitle>Martin Munguia&apos;s website. </subtitle><entry><title type="html">Adding a CLoudflare Workers OAuth app</title><link href="F5veRings.github.io/blog/2023/adding-a-cloudflare-workers-oauth-app/" rel="alternate" type="text/html" title="Adding a CLoudflare Workers OAuth app"/><published>2023-08-31T05:46:23+00:00</published><updated>2023-08-31T05:46:23+00:00</updated><id>F5veRings.github.io/blog/2023/adding-a-cloudflare-workers-oauth-app</id><content type="html" xml:base="F5veRings.github.io/blog/2023/adding-a-cloudflare-workers-oauth-app/"><![CDATA[<p>Hi all,</p> <p>I have finally figured out how to integrate my CMS application (Decap CMS) with Github Pages with login functionality.</p> <p>So far, I’ve leveraged `al-folio`’s Jekyll project, `decap-cms` for Jekyll-style posts, and now `sveltia-cms-auth` for their easy integration with decap-cms’ GitHub backend.</p> <p>This is just in time for my trip to Jordan! I might have to open a travel blog soon. :)</p>]]></content><author><name></name></author><category term="code,"/><category term="Jekyll,"/><category term="Cloudflare"/><category term="Workers,"/><category term="CMS"/><summary type="html"><![CDATA[If at first you don't succeed.]]></summary></entry><entry><title type="html">How To Create a Personal Website and Blog for Free</title><link href="F5veRings.github.io/blog/2023/how-this-site-was-built/" rel="alternate" type="text/html" title="How To Create a Personal Website and Blog for Free"/><published>2023-08-30T01:11:44+00:00</published><updated>2023-08-30T01:11:44+00:00</updated><id>F5veRings.github.io/blog/2023/how-this-site-was-built</id><content type="html" xml:base="F5veRings.github.io/blog/2023/how-this-site-was-built/"><![CDATA[<h2 id="creating-your-own-hosted-website-and-blog-for-free">Creating your own hosted website and blog, for free!</h2> <p>Hi all! I want to share with you how I built this blog. Most of the features in this site I borrowed from <a href="https://github.com/alshedivat/al-folio">alshedivat/al-folio</a> <code class="language-plaintext highlighter-rouge">al-folio</code>. In order to edit my posts I am currently using an open-source app called <a href="https://github.com/decaporg/decap-cms">Decap CMS</a>. In order to edit posts online, you need to validate against Github’s OAuth, but there’s no safe way to do that from a static site directly. Luckily, you can setup your own <a href="https://github.com/sveltia/sveltia-cms-auth">Decap CMS-compatible Cloudflare Worker</a> to run the authentication for you at no charge. I am currently running on Windows; if you want a Linux version of the tutorial, feel free to request it! :) This tutorial assumes you’re familiar with <code class="language-plaintext highlighter-rouge">docker-compose</code>.</p> <h3 id="one-two-skip-a-few">One, Two, Skip a Few…</h3> <p>Well, why reinvent the wheel. The <code class="language-plaintext highlighter-rouge">all-folio</code>’s <a href="https://github.com/alshedivat/al-folio/blob/master/README.md">README</a> is an excellent place to get started. This tutorial assumes that you are able to get the base site up and running in github-pages and that you have <a href="https://giscus.app/">gisqus</a> enabled.</p> <h3 id="almost-there-already">Almost there already!</h3> <p>So your site is up and running. Now we’ll add posts to it!</p> <h4 id="add-a-content-management-system-cms">Add a Content Management System (CMS)</h4> <p>We’ll be working with <code class="language-plaintext highlighter-rouge">decaporg/decap-cms</code>. <a href="https://github.com/decaporg/decap-cms/blob/master/README.md">README</a> Setup is really easy if you’re on Netlify. We’re hosting it on Github Pages, so we’ll need to create our own OAuth server for it. I made my own and tested out several of the ones provided in their documentation to no avail, except for one that runs on Cloudflare Workers. The best part– it’s also free. Score.</p> <ol> <li>In the root folder, create an <code class="language-plaintext highlighter-rouge">admin</code> folder. We’ll add two files there: ``` admin ├ index.html └ config.yml</li> </ol> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>``index.html``
</code></pre></div></div> <hr/> <p>layout: default title: Admin permalink: /admin/ subtitle: login screen for decap title: Login nav: true nav_order: 6 dropdown: false publish_mode: editorial_workflow media_folder: “assets/uploads” — &lt;!doctype html&gt;</p> <html> <head> <meta charset="utf-8"/> <meta name="viewport" content="width=device-width, initial-scale=1.0"/> <meta name="robots" content="noindex"/> <title>Content Manager</title> </head> <body> <script src="https://unpkg.com/decap-cms@^3.0.0/dist/decap-cms.js"></script> </body> </html> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>``config.yml``
</code></pre></div></div> <p>backend: name: github branch: master # Branch to update (optional; defaults to master) repo: your-repo/your-repo.github.io</p> <p>publish_mode: editorial_workflow media_folder: “assets/img/uploads” public_folder: static/media</p> <p>collections:</p> <ul> <li>name: “blog” # Used in routes, e.g., /admin/collections/blog label: “Blog” # Used in the UI folder: “_posts” # The path to the folder where the documents are stored create: true # Allow users to create new documents in this collection slug: “—” # Filename template, e.g., YYYY-MM-DD-title.md fields: # The fields for each document, usually in front matter <ul> <li>{label: “Layout”, name: “layout”, widget: “hidden”, default: “post”}</li> <li>{label: “Comments”, name: “gisqus_comments”, widget: “hidden”, default: “true”}</li> <li>{label: “Title”, name: “title”, widget: “string”}</li> <li>{label: “Publish Date”, name: “date”, widget: “datetime”}</li> <li>{label: “Description”, name: “description”, widget: “string”}</li> <li>{label: “Body”, name: “body”, widget: “markdown”}</li> <li>{label: “Tags”, name: “tags”, widget: “markdown”}</li> <li>{label: “Categories”, name: “categories”, widget: “markdown”}</li> <li>{label: “related”, name: “related_posts”, widget: “hidden”, default: “false”}</li> </ul> </li> <li>name: “news” label: “News” folder: “posts” create: true fields: <ul> <li>{label: “Layout”, name: “layout”, widget: “hidden”, default: “post”}</li> <li>{label: “Comments”, name: “gisqus_comments”, widget: “hidden”, default: “true”}</li> <li>{label: “Publish Date”, name: “date”, widget: “datetime”}</li> <li>{label: “Body”, name: “body”, widget: “markdown”}</li> <li>{label: “gisqus”, name: “giscus_comments”, widget: “hidden”, default: “true”} inline: true ```</li> </ul> </li> </ul> <p>This config file tells the CMS that we have two different collections of posts that we want to be able to create. It requires some kinds of fields, and others are conventions that <code class="language-plaintext highlighter-rouge">al-folio</code>’s posts already follow. You can add/edit to this list to some degree.</p> <p>Once you rebuild the website with docker-compose, you’ll notice you have a login button on your site. It won’t work out of the box because we’re not on Netlify due to OAuth requirements, so we’ll create one ourselves.</p> <h4 id="create-an-oauth-server">Create an OAuth “server”</h4> <p>Why go through all the trouble of creating an OAuth server just to login to a static site? Well, because you static sites can’t do server-side logic, which means they can’t exchange OAuth tokens with Github. For that, we need a tiny bit of server-side processing. So small, we could do without the server and run it off a Cloudflare worker.</p> <p><a href="https://github.com/sveltia/sveltia-cms-auth">Follow this tutorial</a></p> <p>You will need to create a Github OAuth App, a Cloudflare account, and enable Cloudflare Workers. Don’t worry, you can sign up for the free plan without payment info.</p> <p>Follow it to a T! Don’t be a smart guy like me and try to make sense out of Decap CMS’s documentation. It will lead you astray!</p> <h4 id="conclusion">Conclusion</h4> <p>Hope you liked it. I will be editing this as I go. If I’m missing something feel free to request it.</p>]]></content><author><name></name></author><category term="personal-site"/><category term="jekyll"/><category term="blog"/><summary type="html"><![CDATA[How to build a blog on Github Pages]]></summary></entry></feed>